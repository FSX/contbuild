use std
use sys

use "types"

pkg contbuild =
	const clone	: (t : target# -> bool)
	const head	: (t : target# -> std.result(byte[:], byte[:]))
	const pull	: (t : target# -> bool)
	const between	: (t : target#, from : byte[:], to : byte[:] -> std.result(byte[:][:], byte[:]))
	const checkout	: (t : target#, ref : byte[:] -> bool)
	const purge	: (t : target# -> bool)
	const summary	: (t : target#, hash : byte[:] -> byte[:])
	const commitmsg	: (t : target#, hash : byte[:] -> byte[:])
;;

const clone = {t
	match readcmd(t._repo, ["git", "clone", t.repo, t._repo][:])
	| `std.Ok r:
		std.slfree(r)
		-> true
	| `std.Err e:	
		std.put("could not clone: {}\n", e)
		std.slfree(e)
		-> false
	;;
}

const purge = {t
	match readcmd(t._repo, ["git", "clean", "-xfd"][:])
	| `std.Ok r:
		std.slfree(r)
		-> true
	| `std.Err e:
		std.put("could not purge: {}\n", e)
		std.slfree(e)
		-> false
	;;
}

const head = {t
	var s, tip

	tip = std.fmt("refs/heads/{}", t.tip)
	match readcmd(t._repo, ["git", "show-ref", "-s", tip][:])
	| `std.Ok r:	
		s = std.sldup(std.strstrip(r))
		std.slfree(tip)
		std.slfree(r)
		-> `std.Ok s
	| `std.Err e:
		std.slfree(tip)
		-> `std.Err e
	;;
}

const between = {t, from, to
	var range, ret

	if std.sleq(from, to)
		-> `std.Ok [][:]
	;;
	range = std.fmt("{}..{}", from, to)
	ret = [][:]
	match readcmd(t._repo, ["git", "rev-list", range][:])
	| `std.Ok r:
		std.slfree(range)
		for ln in std.bysplit(r, "\n")
			std.slpush(&ret, std.sldup(ln))
		;;
		-> `std.Ok ret
	| `std.Err e:
		std.slfree(range)
		-> `std.Err e
	;;
}

const checkout = {t, rev
	match readcmd(t._repo, ["git", "checkout", rev][:])
	| `std.Ok r:
		std.slfree(r)
		-> true
	| `std.Err e:
		std.slfree(e)
		-> false
	;;
}

const pull = {t
	match readcmd(t._repo, ["git", "pull"][:])
	| `std.Ok r:
		std.slfree(r)
		-> true
	| `std.Err r:
		std.slfree(r)
		-> false
	;;
}

const summary = {t, hash
	-> showmsg(t, hash, "--format=%s")
}

const commitmsg = {t, hash
	-> showmsg(t, hash, "--format=%B")
}

const showmsg = {t, hash, fmt
	match readcmd(t._repo, ["git", "show", "-s", fmt, hash][:])
	| `std.Ok r:
		-> r
	| `std.Err e:
		std.put("error: {}\n", e)
		std.slfree(e)
		-> std.fmt("unknown commit {}", hash)
	;;
}

const readcmd = {dir, cmd
	var s, ok

	if !std.chdir(dir)
		std.put("could not chdir to {}\n", dir)
	;;
	match std.spork(cmd)
	| `std.Ok (pid, stdin, stdout):
		std.close(stdin)
		match std.fslurp(stdout)
		| `std.Ok r:
			s = r
			ok = true
		| `std.Err e:
			s = std.sldup("unable to read output")
			ok = false
		;;
		std.close(stdout)

		match std.wait(pid)
		| `std.Wsuccess:
		| _:	ok = false
		;;

		if ok
			std.put("output: {}\n", s)
			-> `std.Ok s
		else
			-> `std.Err s
		;;
	| `std.Err e:
		-> `std.Err std.sldup("unable to execute")
	;;
}
