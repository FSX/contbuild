use std
use sys

use "types"
use "repo"
use "report-html"

pkg contbuild =
	const run : (targs : target#[:] -> void)
;;

const run = {targs
	for t in targs
		if !std.fexists(t._repo)
			std.chdir(t.scratch)
			clone(t)
		;;
	;;

	while true
		for t in targs
			std.chdir(t._repo)
			runonce(t)

		;;
		std.usleep(120*std.Sec)
	;;
}

const runonce = {t
	var r : report
	var ranfix, ok

	r = [
		.build=[.cmd="", .out="", .err="", .ok=true],
		.test=[.cmd="", .out="", .err="", .ok=true],
		.fix=[.cmd="", .out="", .err="", .ok=true],
		.clean=[.cmd="", .out="", .err="", .ok=true],
	]

	for u in updates(t)
		std.put("Current update: {}\n", u)
		ranfix = false
		reset(&r)
		if !checkout(t, u)
			continue
		;;
:retry
		if !testrun(t, &r)
			ok = false
			if !ranfix
				ranfix = true
				runcmd(t.fix, &r.fix)
				goto retry
			;;
		else
			ok = true
		;;
		report(t, &r, ok, u)
		purge(t)
	;;
	checkout(t, t.tip)
}

const testrun = {t, r
	-> runcmd(t.build, &r.build) && \
		runcmd(t.test, &r.test) && \
		runcmd(t.clean, &r.clean)
}


const updates = {t
	var old, new, err, ret
	var changed = false

	err = ""
	old = [][:]
	new = [][:]
	ret = [][:]

	match head(t)
	| `std.Ok r:
		old = r
	| `std.Err e:	
		err = e
		goto error
	;;

	if !pull(t)
		goto error
	;;


	match head(t)
	| `std.Ok r:
		new = r
	| `std.Err e:	
		err = e
		goto error
	;;

	match between(t, old, new)
	| `std.Ok r:
		ret = r
		goto done
	| `std.Err e:
	;;
:error
	std.put("unable to get updates: {}\n", err)
:done
	std.slfree(err)
	std.slfree(old)
	std.slfree(new)
	-> ret
}

const report = {t, r, status, hash
	reporthtml(t, r, status, hash);
}

const reset = {r
	resetcmd(&r.build)
	resetcmd(&r.test)
	resetcmd(&r.fix)
	resetcmd(&r.clean)
}

const resetcmd = {c
	set(&c.out, "")
	set(&c.err, "")
	c.ok = true
}

const set = {s, v
	std.slfree(s#)
	s# = v
}

const runcmd = {cmd, r
	std.put("{}\n", cmd)
	r.ok = true
	if cmd.len == 0
		-> true
	else
		set(&r.cmd, std.strjoin(cmd, " "))
		match std.espork(cmd)
		| `std.Ok (pid, stdin, stdout, stderr):
			match std.fslurp(stdout)
			| `std.Ok o:	set(&r.out, o)
			| `std.Err e:	set(&r.out, std.fmt("could not read stdout: {}\n", e))
			;;
			match std.fslurp(stderr)
			| `std.Ok o:	set(&r.err, o)
			| `std.Err e:	set(&r.err, std.fmt("could not read stderr: {}\n", e))
			;;
			match std.wait(pid)
			| `std.Wsuccess:
			| _:	r.ok = false
			;;
		| `std.Err e:
			r.ok = false
			set(&r.err, std.fmt("could not run command {}\n", cmd))
		;;
		-> r.ok
	;;
}

